from collections import Counter
#obtain cipher
#analyze cipher
#calculates index of coincidence: if ic is between zero and .065 it is likely a monoalphabet substituion.  If the number is between .035 and .065 or less than .035, then we have a polyalpah.

letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

eng_freq = [.0817, .0149, .0278, .0425, .1270, .0223, .0202, .0609, .0697, 0015, 
.0077, .0403, .0241, .0675, .0751, .0193, .0010, .0599, .0633, .0906, .0276, 
.0098, .0236, .0015, .0197, .0007]

#Polyalpha
example = "UZRZEGNJENVLISEXRHLYPYEGTESBJHJCSBPTGDYFXXBHEEIFTCCHVRKPNHWXPCTUQTGDJHTBIPRFEMJCNHVTCFSAIIJENREGSALHXHWZWRZXGTTVWGDHTEYXISAGQTCJPRSIAPTUMGZALHXHHSOHPWCZLBRZTCBRGHCDIQIKTOAAEFTOPYEGTENRAIALNRXLPCEPYKGPNGPRQPIAKWXDCBZXGPDNRWXEIFZXGJLVOXAJTUEMBLNLQHGPWVPEQPIAXATYENVYJEUEI"

#Monoalpha
example2="SylnlxsrpyyacaolylwjeiswiuparlulsxrjisrsxrjsxwjriaesmmrwctjsxszasjwmpramhlxotxmarrjiaaqsoaxwasrpqaceiamnsxuiaesmmcaytrajpfamsaqasjSypxjiapjiacilxoiasrpyyacaorpnajisxueiswilyypcorlcalrpxypclwjsxusxlwwpcolxwajpisrsxrjsxwjriaesmmlwwabjsjaqaxpxjiarmsuijarjaqsoaxwaJiapcsusxpynhjirsragbmlsxaosxjisrelhFacjclxoCtrramm"
example2 = example2.upper()

example3="cearliwarceifvrigagifcaqpnnwcdceiizpoxniphdsiauwdvkliwtdkgeprkixipcigqepkpqcikrimhiqpkiuvnfdccdafqnvgiceikixipcigqepkpqcikrafceiqaxeikpnxephic."


def idx_concdnce (cipher, alpha):

    #this method attempts to determine whether we have mono/polyalphabets. 
    #If the ciphertext were generated by a monoalphabetic cipher, we should
    #determine I to be near 0.065 because a monoalphabetic cipher is just a
    #permutation of the letters of a single alphabet

    #order and count letters in the ciphertext to cacluate the Incidence of 
    #coincidence for a sample of ciphertext can indicate the existence of a
    #polyalpahbetic cipher

    common = Counter(cipher)
    ic = 0

    
    for index in list(alpha):
      #this calcuates the sum of the count for each letter in the    
      #ciphtertext Sum n(n-1) and divides it by the product of the lenght of      
      #ciphertext and length of cipher-1.

      ic = ic + (common[index] * (common[index] - 1))
      
      ic = round(float(ic * 1/len(cipher) * 1/(len(cipher) - 1)), 6)
      # print (ic)   
      # if ic is close between zero and 0.065, it is likely to be a monoalphabetic
      # substitution, if it is between 0.0385 and  0.065 or less than .0385 the 
      # text was most likely enciphered using a polyalphabetic cipher like 
    


    
    return ic

ixc=idx_concdnce (example, letters)
print ("The incidence of coincidence is: ", ixc)
print (example2)
ixc2=idx_concdnce (example2, letters)
print ("The incidence of coincidence is: ", ixc2)

ixc3=idx_concdnce (example3.upper(), letters)
print ("The incidence of coincidence is: ", ixc3)

#identify period for key
#determine blocks
