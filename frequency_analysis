from collections import Counter
#obtain cipher
#analyze cipher
#calculates index of coincidence: if ic is between one and .065 it is likely a monoalphabet substituion.  If the number is between .035 and .065 or less than .035, then we have a polyalpah.

letters = " ABCDEFGHIJKLMNOPQRSTUVWXYZ"

eng_freq = [.0817, .0149, .0278, .0425, .1270, .0223, .0202, .0609, .0697, 0015, 
.0077, .0403, .0241, .0675, .0751, .0193, .0010, .0599, .0633, .0906, .0276, 
.0098, .0236, .0015, .0197, .0007]


Key_guess= dict({1: 0.0660, 2: 0.0520, 3: 0.0473, 4: 0.0449, 5: 0.0435, 6: 0.0426, 7: 0.0419, 8: 0.0414, 9: 0.0410, 10: 0.0407})

#Polyalpha
example = "UZRZEGNJENVLISEXRHLYPYEGTESBJHJCSBPTGDYFXXBHEEIFTCCHVRKPNHWXPCTUQTGDJHTBIPRFEMJCNHVTCFSAIIJENREGSALHXHWZWRZXGTTVWGDHTEYXISAGQTCJPRSIAPTUMGZALHXHHSOHPWCZLBRZTCBRGHCDIQIKTOAAEFTOPYEGTENRAIALNRXLPCEPYKGPNGPRQPIAKWXDCBZXGPDNRWXEIFZXGJLVOXAJTUEMBLNLQHGPWVPEQPIAXATYENVYJEUEI"

#Monoalpha
example2="SylnlxsrpyyacaolylwjeiswiuparlulsxrjisrsxrjsxwjriaesmmrwctjsxszasjwmpramhlxotxmarrjiaaqsoaxwasrpqaceiamnsxuiaesmmcaytrajpfamsaqasjSypxjiapjiacilxoiasrpyyacaorpnajisxueiswilyypcorlcalrpxypclwjsxusxlwwpcolxwajpisrsxrjsxwjriaesmmlwwabjsjaqaxpxjiarmsuijarjaqsoaxwaJiapcsusxpynhjirsragbmlsxaosxjisrelhFacjclxoCtrramm"
example2 = example2.upper()

example3="cearliwarceifvrigagifcaqpnnwcdceiizpoxniphdsiauwdvkliwtdkgeprkixipcigqepkpqcikrimhiqpkiuvnfdccdafqnvgiceikixipcigqepkpqcikrafceiqaxeikpnxephic."

example4="UMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDEUMYFTQNQEFUZFAIZOUBTQDNDQMWQDE"

def idx_concdnce (cipher, alpha):

    #this method attempts to determine whether we have mono/polyalphabets. 
    #If the ciphertext is generated by a monoalphabetic cipher, we should
    #determine I to be near 0.065 because a monoalphabetic cipher is just a
    #permutation of the letters of a single alphabet

    #order and count letters in the ciphertext to cacluate the Incidence of 
    #coincidence for a sample of ciphertext can indicate the existence of a
    #polyalpahbetic cipher

    common = Counter(cipher)
    denom=len(cipher)*(len(cipher)-1)
    ic = 0.0000

    print common
    
    for index in list(alpha):
      #this calcuates the sum of the count for each letter in the    
      #ciphtertext Sum n(n-1) and divides it by the product of the length of      
      #ciphertext and length of cipher-1.

      ic = ic + (common[index] * (common[index] - 1))
    
 
    x = float(ic /denom)
    print (x)   
      # if ic is close between zero and 0.065, it is likely to be a monoalphabetic
      # substitution, if it is between 0.0385 and  0.065 or less than .0385 the 
      # text was most likely enciphered using a polyalphabetic cipher like 
    


    
    return float(x)


#Guess length.  m = 0.027n/((n- 1)Icx - 0.038n + 0.065.  This is called the #Friedman formula for guessing the length of a key used to encrypt the message and
#produce the cipher.  The guess, for keys between 1 and 10 is based on the #largest key_length between the calculation and a dictionary mapping for length #and incidence of coincidence


def friedman_length_guess(cipher, alpha):
    l = 0
    l2=0
    n = len(cipher)
    i = idx_concdnce(cipher, alpha)
    l = n * (0.027)/((n-1)*i + 0.0655 - (0.0385*n))

    print ("first guess:", l)
    if i > .038:
	for keys in Key_guess:
	  if i > Key_guess[keys]:
		l2=keys
		break 
	print ("second guess:", l2)
		

    if l2 > l:
	l=l2	

    return l

###Testing

ixc=idx_concdnce (example, letters)
ln=friedman_length_guess(example, letters)
print ("The incidence of coincidence is: ", ixc)
print ("The Friedman key length guess is: ", ln)

ixc2=idx_concdnce (example2, letters)
ln2=friedman_length_guess(example2, letters)
print ("The incidence of coincidence is: ", ixc2)
print ("The Friedman key length guess is: ", ln2)

ixc3=idx_concdnce (example3.upper(), letters)
ln3=friedman_length_guess(example3.upper(), letters)
print ("The incidence of coincidence is: ", ixc3)
print ("The Friedman key length guess is: ", ln3)

ixc4=idx_concdnce (example4, letters)
ln4=friedman_length_guess(example4, letters)
print ("The incidence of coincidence is: ", ixc4)
print ("The Friedman key length guess is: ", ln4)

#identify period for key


#determine blocks
